{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ec9c52c0-748e-4e4b-88ae-f8e74f31a2c3",
   "metadata": {},
   "source": [
    "# Basic calculations in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98da5c0d-e1b2-408e-8538-5a2a9212339e",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=8\n",
    "b=4\n",
    "print('Sum= ', a+b)\n",
    "print('Difference= ', a-b)\n",
    "print('Division= ', a/b)\n",
    "print('Multiplication= ',a*b)\n",
    "#Calculating remainder here\n",
    "print('Remainder= ', a%b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb9c3575-d3a7-4c00-8f3b-f061de7c63fa",
   "metadata": {},
   "source": [
    "# Importing the library numpy \n",
    "#to know what a particular function does, you can use- ?function_name\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6690059d-31f2-4f6e-be32-df5593dc13a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "?np.loadtxt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfbbdbe9-8bff-42af-9f22-2601779e6463",
   "metadata": {},
   "outputs": [],
   "source": [
    "%lsmagic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9ab0a178-5924-4f18-b564-c8301d4e06ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91165535-e35c-4290-bfd2-0074ce293b3b",
   "metadata": {},
   "source": [
    "### Creating Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "741b32fb-4090-4f00-89c4-c059c762b466",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = [1,3,45,8]\n",
    "#To convert into numpy array\n",
    "A_np = np.array(A)\n",
    "print(A, type(A))\n",
    "print(A_np, type(A_np))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6ba86c59-ad74-44fd-a3ce-2f1afffe23cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  3 45  8]\n"
     ]
    }
   ],
   "source": [
    "A=[1,3,45,8]\n",
    "B=numpy.array(A)\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9dc95052-945c-472f-825d-d6444e8d12b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "a_np = np.ones(10000)\n",
    "print(a_np,len(a_np))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae95c5cb-074c-4476-bd16-4f06c9f9b11b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "start_time = time.time()\n",
    "np.sum(a_np)\n",
    "end_time = time.time()\n",
    "print('array took',(end_time-start_time)*1e3,'milli seconds')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91d1ab4d-acac-4496-b5c1-1b3edb2633d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = list(a_np)\n",
    "start_time = time.time()\n",
    "sum(a)\n",
    "end_time = time.time()\n",
    "print('list took',(end_time-start_time)*1e3,'milli seconds')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "322dee4a-cb0a-407c-b397-b2c03bc1e60b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Some more example\n",
    "a1 = np.array([4,6,8,2])\n",
    "a2 = np.zeros(10)#create array of only zeros\n",
    "print(a2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86963f12-cad9-4459-93ab-7d8b9714b9f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "a3 = np.zeros([2,2])#create a 2X2 matrix\n",
    "print(a3)\n",
    "a4 = np.random.random(10)#create an array of random number in 0 to 1\n",
    "print(a4)\n",
    "a5 = np.random.randn(10)\n",
    "print(a5)#returns an array of random numbers from normal distribution\n",
    "a6 = np.linspace(0, 10, 20)\n",
    "print(a6)#Create an array containing 20 numbers from 0 to 20(including 20)\n",
    "a7 = np.arange(0, 10, 0.2)\n",
    "print(a7)#create an array containing 0 to 10 (not include 10)\n",
    "#each element of the array will contains elements such that they differe by 0.2\n",
    "a8 = np.logspace(0,4,num=4,base=10)\n",
    "print(a8)#In linear space, the sequence starts at base ** start \n",
    "#(base to the power of start) and ends with base ** stop (see endpoint below)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db392bc5-e1a7-44aa-bf20-6582a4c1d319",
   "metadata": {},
   "source": [
    "### Accessing data of array and Slicing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d295121-5a74-41bc-af92-52ddd4afc958",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(a6)\n",
    "a6[2]#returns (3+1)th data of array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ac1a51b-3eba-491d-b0a0-7513c2ff8e33",
   "metadata": {},
   "outputs": [],
   "source": [
    "a6[-3]#returns 2nd data from last element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "709fb97e-054e-4a06-bac3-4da25ee022aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "a6*6#retruns square of all elemets of the array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42351021-884f-49c7-9630-b8e2bf2a868b",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.sin(a6)#/a6#Compute sinc(x)\n",
    "#Note: (sinx/x) for x = 0 is not defined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "34df713f-264c-40ac-89ee-b0fdf8f6ee94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6, 7, 8])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([1,2,3,4,5,6,7,8])\n",
    "a[:]#gives full array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "13ad0437-e38f-4819-9b2a-be87a6c355ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4, 5])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[2:5]\n",
    "#returns an array from 2nd indexed element to 4th indexed element of array a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2459238e-7e43-4f66-81e5-e313ed81dc7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "a[1:7:1]# returns an array of elements starting from a[1] to a[7] but with a index gap of 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4d1f4cb-0bb3-4f01-aca0-20d3ede8ae35",
   "metadata": {},
   "outputs": [],
   "source": [
    "array([2, 3, 4, 5, 6, 7])\n",
    "We can also use negative indexes, give it a try."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d04156e-2da4-4643-8278-84cc122d1482",
   "metadata": {},
   "source": [
    "### We can also check conditions using basic logics and filter arrays and also create masks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b230d4b3-c6fa-4a9c-9cdb-030e9631d924",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([2,4,5,6,7,8,10])\n",
    "a>5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04c01a88-9969-4e0a-bf0d-2c7be099c791",
   "metadata": {},
   "outputs": [],
   "source": [
    "a[(a>5) & (a<8)]#Only returns elements which satisfy the conditions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "763d76a2-d0ee-4d10-96b4-68dc24827eac",
   "metadata": {},
   "source": [
    "## Statistics with numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc567204-18a4-4812-affa-b1d368783e8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.random.randn(10000)+6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb84c1cb-81cd-4a6b-9fc4-4f76abb2f5cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e91b9d40-b19e-4ba5-94f1-928191f9f156",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(a)#Find mean of all elements of array a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f584c800-e9fd-46e0-8e8a-24b231c66c2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.std(a)#Find standard divison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7957db87-c6d1-46ad-98e0-413c8af24f08",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([1,2,3])\n",
    "np.cumsum(a)#Find cumulative sum\n",
    "#1, 1+2, 1+2+3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bf4f6a0-e5da-494d-a110-a23da0e735cd",
   "metadata": {},
   "source": [
    "### Calculus with NumPy\n",
    "##### To perform derivatives:-"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4dc8ed0-9b15-490b-a956-55fc3ad0be86",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(0,10,1000)\n",
    "y = np.sin(x)\n",
    "dy_dx = np.gradient(y,x)#Find derivative\n",
    "plt.plot(x,y,label=r\"$\\sin(x)$\")\n",
    "plt.plot(x,dy_dx,label=r\"$\\frac{d}{dx}\\sin(x)$\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da3609be-59a4-492c-804f-68040f9c2b17",
   "metadata": {},
   "source": [
    "##### To perform Integration:-"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e4ef1f2-3b98-4528-ad32-93f70683480f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_integrate = np.cumsum(y)*(x[1]-x[0])\n",
    "plt.plot(x,y,label=r\"$\\sin(x)$\")\n",
    "plt.plot(x,y_integrate,label=r\"$\\int_0^{10}\\sin(x) dx$\")\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()#Comment on the graph of this one"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e759e9b-c8aa-4afa-8318-c62d4fb1c91b",
   "metadata": {},
   "source": [
    "#### Multidimensional Array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b89657bd-b898-4877-86a1-4a347db32fe5",
   "metadata": {},
   "outputs": [],
   "source": [
    "a1 = np.array([[1,23,8],[2,7,8],[8,0,9]])\n",
    "a1#This is a multidimensional array -- tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6f320ff-7753-4e2b-ab7e-eebeb9f55620",
   "metadata": {},
   "outputs": [],
   "source": [
    "a1.shape#Returns the size along row and column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cae2460d-07ec-412b-923e-40d7e7789759",
   "metadata": {},
   "source": [
    "### Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "795649cd-0f10-4337-99d9-26680317eac1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt#let's plot some basic function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "8f3d867a-9f60-44f4-8d28-854dce140042",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(0,10,100)\n",
    "y = np.sin(x)\n",
    "plt.plot(x,y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "05c65dec-69c6-48db-9e9d-e4d0be966fe9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = np.linspace(-100,100,1000) #to create an array\n",
    "b = 2*a**2 + 5\n",
    "plt.plot(a,b,'-k')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "077d0c03-1801-477b-99cc-719400ecf1a5",
   "metadata": {},
   "source": [
    "## SciPy (Scientific Python) contains many useful functions that will be useful by scientists. most notable parameter Optimization, integration, interpolation, and signal processing.\n",
    "#### Interpolation of Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "27982d86-6f3f-4065-bf7d-7d79d4b35382",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(0, 10, 10)\n",
    "y = x**2 * np.sin(x)\n",
    "plt.scatter(x,y)\n",
    "plt.show()\n",
    "from scipy.interpolate import interp1d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "7b6b1748-7d38-4482-bde8-e4de41ec0701",
   "metadata": {},
   "outputs": [],
   "source": [
    "f = interp1d(x, y, kind='cubic')#GIVES A CUBIC FUNCTION which goes through each point\n",
    "x_f = np.linspace(0, 10, 100)\n",
    "y_f = f(x_f)\n",
    "plt.plot(x_f, y_f,ls=\"--\",c=\"Black\")\n",
    "plt.scatter(x, y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcfdd3d9-8f0f-4916-90bf-584d97c39a8c",
   "metadata": {},
   "source": [
    "### Curve Fitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3779df19-72a8-4070-b6c7-28243c2a2c37",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_data = np.linspace(0, 10, 10)\n",
    "y_data = 3*x_data**2 + 2+np.random.normal(10)*0.1\n",
    "plt.scatter(x_data, y_data); plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab9af722-3005-4d34-9194-6ce45a3e9be1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.optimize import curve_fit\n",
    "\n",
    "def func(x, a, b):#you can use any function\n",
    "    return a*x**2 + b\n",
    "popt, pcov = curve_fit(func, x_data, y_data, p0=(1,1))\n",
    "print(popt)#first element is a's value, 2nd is b's value\n",
    "\n",
    "plt.scatter(x_data, y_data)\n",
    "plt.plot(x_data,popt[0]*x_data**2 + popt[1],'--', color = 'red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41b70e2a-9ec7-464c-8469-9fcc96e52cb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "t_data = np.array([ 0.   ,  0.34482759,  0.68965517,  1.03448276,  1.37931034,\n",
    "        1.72413793,  2.06896552,  2.4137931 ,  2.75862069,  3.10344828,\n",
    "        3.44827586,  3.79310345,  4.13793103,  4.48275862,  4.82758621,\n",
    "        5.17241379,  5.51724138,  5.86206897,  6.20689655,  6.55172414,\n",
    "        6.89655172,  7.24137931,  7.5862069 ,  7.93103448,  8.27586207,\n",
    "        8.62068966,  8.96551724,  9.31034483,  9.65517241, 10.        ])\n",
    "y_data = np.array([ 4.3303953 ,  1.61137995, -2.15418696, -3.90137249, -1.67259042,\n",
    "        2.16884383,  3.86635998,  1.85194506, -1.8489224 , -3.96560495,\n",
    "       -2.13385255,  1.59425817,  4.06145238,  1.89300594, -1.76870297,\n",
    "       -4.26791226, -2.46874133,  1.37019912,  4.24945607,  2.27038039,\n",
    "       -1.50299303, -3.46774049, -2.50845488,  1.20022052,  3.81633703,\n",
    "        2.91511556, -1.24569189, -3.72716214, -2.54549857,  0.87262548])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4926a93a-dd63-4b81-8124-12a6377641eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(t_data,y_data,'o--',c=\"Red\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93361a35-f746-4f44-b3b2-937fe7d3943d",
   "metadata": {},
   "source": [
    "##### We can see and give some guess values.\n",
    "\n",
    "#### A = 4, ɸ = 0 and T ≈ 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c9632cf-95ce-494f-8e27-212e96c26f01",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.optimize import curve_fit\n",
    "\n",
    "def func(x, A, w, phi):\n",
    "    return A*np.cos(w*x+phi)\n",
    "\n",
    "popt, pcov = curve_fit(func, t_data, y_data, p0=(4, np.pi, 0))\n",
    "popt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9aa9fc11-cc30-48e9-9ffb-061ac5438351",
   "metadata": {},
   "outputs": [],
   "source": [
    "A, w, phi = popt\n",
    "t = np.linspace(0, 10, 100)\n",
    "y = func(t, A, w, phi)\n",
    "plt.scatter(t_data,y_data)\n",
    "plt.plot(t,y,color=\"Red\",ls=\"--\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22eab103-b97c-49c9-9874-fd5b98592a96",
   "metadata": {},
   "source": [
    "### Special Functions\n",
    "##### In physics, we many times need some special functions like bessel function, Legendre and many more. This things can also be accessed using scipy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa76f6cd-e7fe-4846-9958-bd198f9b97af",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.special import legendre\n",
    "x = np.linspace(0, 1, 100)\n",
    "plt.plot(x, legendre(6)(x))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e032236-4c0a-494d-92d2-eec47ba1c680",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(6):\n",
    "    plt.plot(x, legendre(i)(x),label=r\"$J_%s$\"%i)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dceabe7a-4946-4268-a3c5-2eb7426dc706",
   "metadata": {},
   "source": [
    "# ASTROPY\n",
    "#### Astropy is a community-driven Python package containing many tools and functions that are useful for doing astronomy and astrophysics, from observation planning, data reduction and data analysis to modelling and numerical calculations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4705c63-ff5e-4e16-a5d9-266213480c56",
   "metadata": {},
   "source": [
    "### Constants and Unit Convertion\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62b6d375-c104-4239-b61f-3b96e9252f38",
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy import constants as const #import the constants submodule of astropy\n",
    "print(const.G)\n",
    "print(const.M_sun)\n",
    "print(const.M_earth)\n",
    "print(const.R_earth)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c438b5a-028f-4ff9-a992-69b4efa0c212",
   "metadata": {},
   "source": [
    "##### Let's try and find earth's semi-major axis using this constants and Kepler's Law."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2201079b-93ac-4ecd-9eb0-1b559568414b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from astropy import units as u # To make units correct. Just wait we will learn this\n",
    "def semi_major_calc(T,M,m):\n",
    "    return np.cbrt((T**2*const.G*(m+M))/(4*np.pi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d408e779-8279-4e75-92da-3163c84ee839",
   "metadata": {},
   "outputs": [],
   "source": [
    "T = 365*24*3600*u.s#Convert time period into sec\n",
    "m = const.M_earth\n",
    "M = const.M_sun\n",
    "semi_major_calc(T,M,m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a4d4d57-8400-4770-87a7-a4c61152f1de",
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy import units as u# To access the unit tools\n",
    "print(const.c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e62d787-26f2-4df8-be2a-25eb11319103",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(const.c.to('km/s'))#converts speed of light from m/s to km/s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4f7b8f5-1b74-4b62-bcf1-c0bb12747c1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "const.c.cgs #WE can also directly access values in cgs unit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b175cf45-17f1-4a57-80b2-d6a06c80d1ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(const.h)\n",
    "print(const.h.to('MeV'))#If conversion is not possible then it will show error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c178111-c485-493b-83c0-9ac2a578afc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lets find rest-mass energy of electron\n",
    "#My teacher is going to beat me for using rest-mass\n",
    "E_0 = const.m_e*const.c**2#electron's mass\n",
    "print(E_0)\n",
    "E_0.to('MeV')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "404d13cb-8da9-434a-bafc-d06549016acb",
   "metadata": {},
   "source": [
    "##### If we have some scalar, we can add units to it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5054845a-bff1-453d-89bb-303fa747c45b",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 2\n",
    "print(a)\n",
    "print(a*(u.m/u.s))#make it 2m/s -- velocity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f413c74-e7af-4bb5-8080-17a21ce9d558",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e3eb48fa-e90b-49d9-8972-2b96cbf4bec5",
   "metadata": {},
   "source": [
    "##### In astronomy, observed data is typically stored in fits files, that can be plotted here using the same packages to plot data points. Here, I am going to give an example using a published image of a popular disk, that recently garnered attention for a newly discovered protoplanet in the system, AB Aur b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ba00f1e7-37ab-4829-8122-606d1a9f20a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import astronomy package\n",
    "from astropy.io import fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9af8ea3-8d3c-42b2-ab18-e53e396a4d9e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e82fd303-59ee-4433-9436-34ce9067f443",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24ea19a9-43b2-4c4f-aa4d-80dbf47d4e1d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c10d896f-8f61-4eab-a312-d708be3e0879",
   "metadata": {},
   "outputs": [],
   "source": [
    "#loading the image\n",
    "#remember to alter the image path accordingly\n",
    "file_dir = 'data/'\n",
    "img_name = 'pdi_pi_collapsed.fits'\n",
    "img = fits.getdata(file_dir+img_name,ext=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60e70702-cb34-43a8-a68d-a0dcdfbdc86c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a figure\n",
    "fig = plt.figure(figsize=(8,8))\n",
    "#plot in the figure\n",
    "image = plt.imshow(img, origin = 'lower', vmin=-0.001, vmax=0.01)\n",
    "cbar = fig.colorbar(image,shrink=0.82)\n",
    "cbar.set_label('Surface Brightness (arb. units)', rotation=90,fontsize=12)\n",
    "plt.xlim([60,140])\n",
    "plt.ylim([60,140])\n",
    "plt.xlabel(r'$\\Delta$ RA [px]',fontsize=12)\n",
    "plt.ylabel(r'$\\Delta$ Dec [px]',fontsize=12);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ee59410-9b09-47c1-951a-efc1a8069a6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reading 20,000 Rows*97 columns of Data- Closest 20k stars from Gaia Archive (DR2)\n",
    "stellar=pd.read_csv(file_dir+'closest20kstars.csv')\n",
    "\n",
    "# Creating a matplotlib (pyplot) figure\n",
    "fig = plt.figure(figsize = [10,10])\n",
    "\n",
    "# Plotting the scatter graph with RA on x-axis and Dec on y-axis. alpha tells the opacity, s is the size\n",
    "plt.scatter(stellar['ra'], stellar['dec'], alpha=0.8, s=12, lw = 0.5, ec = 'k', color='darkorchid')\n",
    "# Adding labels and a title for the figure\n",
    "plt.xlim([0,362])\n",
    "plt.ylim([-75,75])\n",
    "plt.xlabel('RA [$\\degree$]', fontsize = 14)\n",
    "plt.ylabel('Dec [$\\degree$]', fontsize = 14)\n",
    "plt.title('Closest Stars 20,000 stars from Gaia Archive (DR2)', fontsize = 16)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "542f5512-501f-489a-b40a-7f18cdc48a17",
   "metadata": {},
   "source": [
    "##### Here, we are loading positional data of 20,000 stars from a CSV table that consists of Gaia (ESA's space telescope) data for the closest stars. We are then showing all the stars as per their positional coordinates RA and Dec (Right Ascension and Declination) as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "788609b8-9983-497a-8526-19c7b87853bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the libraries (Pandas and Matplotlib)\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Reading 20,000 Rows*97 columns of Data- Closest 20k stars from Gaia Archive (DR2)\n",
    "stellar=pd.read_csv('data/closest20kstars.csv')\n",
    "\n",
    "# Creating a matplotlib (pyplot) figure\n",
    "fig = plt.figure(figsize = [10,6])\n",
    "\n",
    "# Plotting the scatter graph with RA on x-axis and Dec on y-axis. alpha tells the opacity, s is the size\n",
    "plt.scatter(stellar['ra'], stellar['dec'], alpha=0.8, s=0.7)\n",
    "# Adding labels and a title for the figure\n",
    "plt.xlabel('RA [$\\degree$]')\n",
    "plt.ylabel('Dec [$\\degree$]')\n",
    "plt.title('Closest Stars 20,000 stars from Gaia Archive (DR2)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dec07b4e-0994-4078-870e-75fc02a49d75",
   "metadata": {},
   "source": [
    "#### Let us take this a step further and make our own 3D map of the universe for the closest few stars having known radius. Here, we are taking only the stars whose radius is present in the above data. We are plotting those as points with x-axis being RA, y-axis being Dec and z-axis being the distance to the stars. The stars are also given size according to their radius, so they are all in-scale, and they are color coded based on their absolute g-band photometric magnitudes (luminosities).\n",
    "\n",
    "##### We can use the magic command below to also play with the 3D graph!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3891f15d-e151-4884-9c8a-c4779de1937a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Taking out only those stars whose radius is known in the data\n",
    "stellar_trim=stellar[(stellar['radius_val'].notnull())]\n",
    "\n",
    "# The magic command below can be used for interactive 3D plots. Uncomment to visualize the plot in a better way.\n",
    "# %matplotlib notebook\n",
    "\n",
    "# Creating a matplotlib (pyplot) figure\n",
    "fig = plt.figure(figsize = (10, 6))\n",
    "# Define 3D axes\n",
    "ax = plt.axes(projection =\"3d\")\n",
    "# Plot the scatter graph using RA, Dec and distance. A colormap of Red-Yellow-Blue scale is used \n",
    "# with sizes s given by stellar radii, color c given by stellar effective temperature. Opacity is set by alpha\n",
    "scatter_plot=ax.scatter3D(stellar_trim['ra'], stellar_trim['dec'], stellar_trim['s_dist'],\n",
    "              s=stellar_trim['radius_val']*5, c=stellar_trim['teff_val'], cmap='RdYlBu', alpha=0.7)\n",
    "\n",
    "#Setting labels, title and a colorbar for the figure\n",
    "ax.set_xlabel('RA [$\\degree$]')\n",
    "ax.set_ylabel('Dec [$\\degree$]')\n",
    "ax.set_zlabel('Distance [pc]')\n",
    "plt.title('Closest Stars with known radius')\n",
    "fig.colorbar(scatter_plot, label=\"Effective Stellar Temprature [K]\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
